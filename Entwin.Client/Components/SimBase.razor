@using Microsoft.AspNetCore.Components.Web

<div style="@BoxStyle"
     @onmousedown="OnMouseDown"
     @onclick:stopPropagation="true"
     @onmousemove="OnMouseMove"
     @onmouseup="OnMouseUp"
     >
    @ComponentData.DisplayName

    @for (int i = 0; i < ComponentData.OutputCount; i++)
    {
        var outputIndex = i;
        <div style="position:absolute;
                    right:-8px;
                    top:@(8 + outputIndex * (100 / (ComponentData.OutputCount + 1)))px;
                    width:12px;
                    height:12px;
                    background-color:#fff;
                    border:2px solid #000;
                    border-radius:50%;
                    cursor:pointer;"
            @onmousedown="@(e => OnOutputDrag.InvokeAsync((ComponentData.Id, outputIndex, e)))"
            @onmousedown:stopPropagation="true"
            >
        </div>
    }

    @for (int i = 0; i < ComponentData.InputCount; i++)
    {
        var inputIndex = i;
        <div style="position:absolute;
                    left:-8px;
                    top:@(8 + i * (100 / (ComponentData.InputCount + 1)))px;
                    width:12px;
                    height:12px;
                    background-color:#fff;
                    border:2px solid #000;
                    border-radius:50%;
                    cursor:pointer;"
             @onmouseup="(e) => OnInputMouseUp(inputIndex, e)"
             @onmouseup:stopPropagation="true"
             @onmousedown:stopPropagation="true">
        </div>
    }


</div>

@code {
    [Parameter, EditorRequired]
    public BaseComponentData ComponentData { get; set; } = default!;
    private string BoxStyle =>
    $@"position:absolute;
       left:{ComponentData.X}px;
       top:{ComponentData.Y}px;
       width:100px;
       height:100px;
       background-color:#4a90e2;
       color:white;
       display:flex;
       align-items:center;
       justify-content:center;
       border-radius:8px;
       cursor:grab;
       {(ComponentData.IsSelected ? "box-shadow: 0 0 6px 2px #3399ff;" : "")}";

    private bool _isDragging = false;
    private double _startX, _startY;

    [Parameter] public EventCallback<MouseEventArgs> OnSelect { get; set; }
    [Parameter] public EventCallback<(int Id, MouseEventArgs e)> OnStartDrag { get; set; }
    [Parameter] public EventCallback<(int Id, int OutputIndex, MouseEventArgs e)> OnOutputDrag { get; set; }
    [Parameter] public EventCallback<(int Id, int InputIndex, MouseEventArgs e)> OnInputDropped { get; set; }
    [Parameter] public EventCallback<BaseComponentData> OnComponentSelected { get; set; }


    private async Task OnMouseDown(MouseEventArgs e)
    {
        _startX = e.ClientX;
        _startY = e.ClientY;
        _isDragging = false;

        await OnStartDrag.InvokeAsync((ComponentData.Id, e));
    }

    private void OnMouseMove(MouseEventArgs e)
    {
        var dx = Math.Abs(e.ClientX - _startX);
        var dy = Math.Abs(e.ClientY - _startY);

        if (dx > 10 || dy > 10)
            _isDragging = true;
    }

    private async Task OnMouseUp(MouseEventArgs e)
    {
        if (!_isDragging)
            await OnClick(e);

        _isDragging = false;
    }

    private async Task OnClick(MouseEventArgs e)
    {
        await OnSelect.InvokeAsync(e);
        await OnComponentSelected.InvokeAsync(ComponentData);
    }

    private async Task OnOutputDragStart(int outputIndex, MouseEventArgs e)
    {
        await OnOutputDrag.InvokeAsync((ComponentData.Id, outputIndex, e));
    }

    private async Task OnInputMouseUp(int inputIndex, MouseEventArgs e)
    {
        await OnInputDropped.InvokeAsync((ComponentData.Id, inputIndex, e));
    }
}
