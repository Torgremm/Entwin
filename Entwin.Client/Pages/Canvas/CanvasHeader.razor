@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Entwin.Shared.Models

@inject LoginModalService LoginModalService
@inject AuthService AuthService
@inject Entwin.Client.Services.SimulationState SimulationState
@inject Entwin.Client.Services.CanvasStateService CanvasState
@inject HttpClient Http

<div class="header">
    <div class="d-flex gap-3 align-items-end flex-wrap">
        <div class="form-group" style="max-width: 200px;">
            <label>Duration</label>
            <input type="number"
                   class="form-control"
                   @bind="SimulationState.Duration"
                   @bind:event="oninput" />
        </div>

        <div class="form-group" style="max-width: 200px;">
            <label>Time Step: @SimulationState.TimeStep</label>
            <input type="range"
                   min="1" max="5"
                   step="0.01"
                   @bind="LogSliderValue"
                   @bind:event="oninput" />
        </div>

        <div class="d-flex align-items-center gap-2">
            <button type="button" class="btn btn-primary" @onclick="LoadProjects">Load</button>
        </div>

        @if (showDropdown)
        {
            <div class="form-group" style="max-width: 300px;">
                <label>Select Project to Load</label>
                <select class="form-select" @onchange="OnProjectSelected">
                    <option value="">-- Select Project --</option>
                    @foreach (var project in CanvasState.AvailableProjects)
                    {
                        <option value="@project.Name">@project.Name</option>
                    }
                </select>
            </div>
        }

        <div class="form-group" style="max-width: 300px;">
            <label>Project Name</label>
            <input type="text" class="form-control" @bind="projectName" placeholder="Enter project name" />
        </div>

        <div class="d-flex align-items-center gap-2">
            <button type="button" class="btn btn-primary" @onclick="Save">Save</button>
            @if (!string.IsNullOrEmpty(status))
            {
                <p class="mb-0">@status</p>
            }
        </div>
    </div>
</div>

@code {
    private double LogSliderValue
    {
        get => Math.Log10(SimulationState.TimeStep) + 4;
        set => SimulationState.TimeStep = Math.Pow(10, value - 4);
    }

    private string projectName = "";
    private bool showDropdown = false;
    private string status = "";

    private async Task LoadProjects()
    {
        try
        {
            await CanvasState.LoadProjectsAsync(Http);
            showDropdown = CanvasState.AvailableProjects.Any();
            status = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            status = $"Failed to load projects: {ex.Message}";
        }
    }

    private async Task OnProjectSelected(ChangeEventArgs e)
    {
        var selectedName = e.Value?.ToString();
        if (!string.IsNullOrWhiteSpace(selectedName))
        {
            try
            {
                await CanvasState.LoadSelectedAsync(Http, selectedName);
                status = $"Loaded project \"{selectedName}\"";
                showDropdown = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                status = $"Failed to load project: {ex.Message}";
            }
        }
    }

    private async Task Save()
    {
        if (string.IsNullOrWhiteSpace(projectName))
        {
            status = "Please enter a project name before saving.";
            return;
        }

        try
        {
            await CanvasState.SaveProjectAsync(Http, projectName);
            status = "Project saved!";
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"HttpRequestException caught: {ex.Message}");
            if (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await LoginModalService.ShowLoginAsync(Save);
            }
            else
            {
                status = $"Error: {ex.Message}";
            }
        }
        catch (Exception ex)
        {
            status = $"Error: {ex.Message}";
        }
    }
}
